{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Bubble Correlations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import math\n",
    "import sep\n",
    "import operator\n",
    "import matplotlib\n",
    "from matplotlib import gridspec; \n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.ticker as ticker\n",
    "import scipy\n",
    "import scipy.signal as scs\n",
    "import scipy.special as ssp\n",
    "from scipy.integrate import odeint\n",
    "from scipy.stats import shapiro, normaltest, anderson\n",
    "import random\n",
    "import statistics as stat\n",
    "import operator\n",
    "from itertools import zip_longest\n",
    "from collections import OrderedDict\n",
    "from labellines import labelLine, labelLines\n",
    "from celluloid import Camera"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Simulation Parameters "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "lamb =  5.799999999999999\n",
      "m2eff =  0.2611199999999999\n",
      "lenLat =  395.28470752104744\n",
      "phi0 =  0.7853981633974483\n"
     ]
    }
   ],
   "source": [
    "nLat = 1000\n",
    "nTime = 500\n",
    "nSims = 30\n",
    "\n",
    "nu = 2.*10**(-3)\n",
    "omega = 0.25 * 50. * 2. * np.sqrt(nu)\n",
    "delt = np.sqrt(nu / 2.) * (5. + 0.8); \n",
    "rho = 200. * 2. * np.sqrt(nu) / 2.**3\n",
    "lamb = delt * np.sqrt(2. / nu); print('lamb = ', lamb)\n",
    "m2eff = 4. * nu * (- 1. + lamb**2); print('m2eff = ', m2eff)\n",
    "lenLat = 0.5 * 50. / np.sqrt(2. * nu); print('lenLat = ', lenLat)\n",
    "\n",
    "alpha = 8.\n",
    "nCols = 4\n",
    "n_cross = 2\n",
    "phi0 = 2 * np.pi / 8; print('phi0 = ', phi0)\n",
    "phi_initial = np.pi\n",
    "dt_phi_initial = 0.\n",
    "\n",
    "############################################################\n",
    "nyq = nLat//2+1\n",
    "spec = nyq//2\n",
    "hLat = nLat//2\n",
    "dx = lenLat/nLat\n",
    "dk = 2.*np.pi/lenLat\n",
    "dt = dx/alpha\n",
    "outsize = 4*n_cross*nLat/nTime\n",
    "dtout = dt*outsize\n",
    "\n",
    "paper_norm = 1./ phi0 / np.sqrt(4*lenLat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[5.93662603]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def V(phi): \n",
    "    return ( -np.cos(phi) + 0.5 * lamb**2 * np.sin(phi)**2 ) * 4 * nu\n",
    "def dV(phi):\n",
    "    return ( np.sin(phi) + 0.5 * lamb**2 * np.sin(2*phi) ) * 4 * nu\n",
    "\n",
    "right_phi_at_V_max = scipy.optimize.minimize_scalar(lambda x: -V(x), bounds=[np.pi, 2*np.pi], method='bounded')\n",
    "left_phi_at_V_max = scipy.optimize.minimize_scalar(lambda x: -V(x), bounds=[0, np.pi], method='bounded')\n",
    "\n",
    "def F(x):\n",
    "    return V(x) - V(np.pi)\n",
    "phi_bound = scipy.optimize.fsolve(F, 5.5)\n",
    "print(phi_bound)\n",
    "\n",
    "matplotlib.rcParams.update({'font.size': 12})\n",
    "fig = plt.figure(figsize=(5,4))\n",
    "plt.plot([i for i in np.arange(0, 2*np.pi, np.pi/100)], [V(i) for i in np.arange(0, 2*np.pi, np.pi/100)])\n",
    "plt.plot(phi_bound, V(phi_bound), 'ro')\n",
    "plt.axvline(left_phi_at_V_max.x, color='y', ls='--'); plt.axvline(right_phi_at_V_max.x, color='y', ls='--')\n",
    "plt.xlabel(r'$\\phi(x)$'); plt.ylabel(r'$V(\\phi(x))$'); plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "#recombination_time = [time for time in range(nTime) if time%(1/(dtout*np.sqrt(m2eff)))==0]\n",
    "titles = [r'$\\phi(x)$', r'$\\partial_t \\phi(x)$', r'$|\\nabla \\phi(x)|^2$', r'$V(\\phi(x))$']\n",
    "plots_file = '/home/dpirvu/bubble_analysis_thin_wall/plots/'\n",
    "pickle_location = '/home/dpirvu/bubble_analysis_thin_wall/data_save/'\n",
    "suffix = '_for_lamb{:.1f}'.format(lamb)+'_t'+str(nTime)+'_x'+str(nLat)\n",
    "\n",
    "def sim_location(sim):\n",
    "    return '/gpfs/dpirvu/bubble_correlations/lamb{:.1f}'.format(lamb)+'_t'+str(nTime)+'_x'+str(nLat)+'_sim'+str(sim)+'_fields.dat'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Extract data from files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def extract_data(filename, col):\n",
    "    infile = open(filename,'r')\n",
    "    lines = infile.readlines()\n",
    "    field_values = [float(line.split()[col]) for line in lines[1:]]\n",
    "    infile.close()\n",
    "    return field_values\n",
    "\n",
    "def all_real_space_data():\n",
    "    all_rsp_data = []\n",
    "    for sim in range(nSims):\n",
    "        if sim == nSims // 2:\n",
    "            print('Halfway through.')\n",
    "#        print('sim: ', sim, ' ongoing')\n",
    "        sims_tableau = []\n",
    "        for col in range(nCols):\n",
    "            simulation = extract_data(sim_location(sim), col)\n",
    "            simulation = np.reshape(simulation,(nTime, nLat))\n",
    "            sims_tableau.append(simulation)\n",
    "        all_rsp_data.append(sims_tableau)\n",
    "    return(all_rsp_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Halfway through.\n",
      "(30, 4, 500, 1000)\n"
     ]
    }
   ],
   "source": [
    "all_real_data = all_real_space_data()\n",
    "print(np.shape(all_real_data))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2  +  1  +  25  +  2  =  30\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_non_decaying_sims, all_right_decaying_sims, all_left_decaying_sims, all_doubly_decaying_sims = [], [], [], []\n",
    "\n",
    "for sim in range(nSims):\n",
    "    final_timeslice = all_real_data[sim][0][-1]\n",
    "    left_phi_x, right_phi_x = 0, 0\n",
    "    for phi_x in final_timeslice:\n",
    "        if phi_x >= phi_initial + np.pi/2:\n",
    "            right_phi_x += 1\n",
    "        if phi_x <= phi_initial - np.pi/2:\n",
    "            left_phi_x += 1\n",
    "    if (left_phi_x < nLat*0.06 and right_phi_x > nLat*0.06):\n",
    "        boolean = False\n",
    "        for t in range(nTime):\n",
    "            if boolean:\n",
    "                break\n",
    "            if t != nTime-1:\n",
    "                left_phi_x_prime = 0\n",
    "                for phi_x_prime in all_real_data[sim][0][t]:\n",
    "                    if phi_x_prime <= phi_initial - np.pi/2:\n",
    "                        left_phi_x_prime += 1\n",
    "                if left_phi_x_prime >= nLat*0.06:\n",
    "                    all_doubly_decaying_sims.append(sim)\n",
    "                    boolean = True\n",
    "            else:\n",
    "                all_right_decaying_sims.append(sim)\n",
    "    elif (left_phi_x > nLat*0.06 and right_phi_x < nLat*0.06):\n",
    "        boolean = False\n",
    "        for t in range(nTime):\n",
    "            if boolean:\n",
    "                break\n",
    "            if t != nTime-1:\n",
    "                right_phi_x_prime = 0\n",
    "                for phi_x_prime in all_real_data[sim][0][t]:\n",
    "                    if phi_x_prime >= phi_initial + np.pi/2:\n",
    "                        right_phi_x_prime += 1\n",
    "                if right_phi_x_prime >= nLat*0.06:\n",
    "                    all_doubly_decaying_sims.append(sim)\n",
    "                    boolean = True\n",
    "            else:\n",
    "                all_left_decaying_sims.append(sim)\n",
    "    elif (left_phi_x < nLat*0.06 and right_phi_x < nLat*0.06):\n",
    "        all_non_decaying_sims.append(sim)\n",
    "    elif (left_phi_x > nLat*0.06 and right_phi_x > nLat*0.06):\n",
    "        all_doubly_decaying_sims.append(sim)\n",
    "        \n",
    "print(str(len(all_right_decaying_sims)),' + ',str(len(all_left_decaying_sims)),' + ',str(len(all_non_decaying_sims)),' + ',str(len(all_doubly_decaying_sims)),' = ',str(nSims))\n",
    "len(all_right_decaying_sims)+len(all_left_decaying_sims)+len(all_non_decaying_sims)+len(all_doubly_decaying_sims) == nSims"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## VISUALISING SIMULATION DATA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def masked_field_slice(field_slice, threshold):\n",
    "    mask = [1 if phi_x >= threshold else 0 for phi_x in field_slice]\n",
    "    masked_field_slice = mask*field_slice\n",
    "    return masked_field_slice, np.count_nonzero(masked_field_slice)\n",
    "\n",
    "def plot_real_space_data(sim, col):\n",
    "    simulation = all_real_data[sim][col]\n",
    "    fig, ax = plt.subplots(1, figsize=(5,4))\n",
    "#    pspec = [[abs(i*np.conj(i)) for i in field_slice] for field_slice in simulation]\n",
    "    im = ax.imshow(simulation, aspect='auto', interpolation='none', origin='lower', extent=[0, dx*nLat, 0, dtout*nTime])\n",
    "    clb = plt.colorbar(im, ax = ax)\n",
    "    ax.set(xlabel = r'$x$', ylabel = r'$t$')\n",
    "    plt.show()\n",
    "    return\n",
    "\n",
    "def plot_real_space_slices(sim, col, i, j, steps, max):\n",
    "    plt.figure(figsize=(20, 5))\n",
    "    simulation = all_real_data[sim][col][i:j:steps]\n",
    "    for field_slice in simulation:\n",
    "        plt.plot(np.arange(max), field_slice[:max], label = i)\n",
    "#    pspec = [[abs(i*np.conj(i)) for i in field_slice] for field_slice in simulation]\n",
    "#    for slice in pspec[i:j:steps]:\n",
    "#        plt.plot(np.arange(1, max), slice[1:max], label = i)\n",
    "        i = i + steps\n",
    "    labelLines(plt.gca().get_lines(), xvals=(0, max), align=False)\n",
    "    plt.xlabel(r'$x$')\n",
    "    plt.grid()\n",
    "    plt.show()\n",
    "    return\n",
    "\n",
    "def add_mask(field_slice, threshold):\n",
    "    mask = [0 if -threshold <= field_slice[i] <= threshold else 1 for i in range(len(field_slice))]\n",
    "    return field_slice * mask\n",
    "\n",
    "def make_mask(simulation, threshold):\n",
    "    mask = np.ones((nTime, nLat))\n",
    "    for j in range(nTime):\n",
    "        for i in range(nLat):\n",
    "            if -threshold <= simulation[j, i] <= threshold:\n",
    "                mask[j, i] = 0\n",
    "    return mask\n",
    "\n",
    "def plot_masked_field(simulation, threshold):\n",
    "    fig, ax = plt.subplots(figsize=(5,4))\n",
    "    masked_field = [add_mask(field_slice, threshold) for field_slice in simulation]\n",
    "    im = ax.imshow(masked_field, aspect='auto', interpolation='none', origin='lower')#, extent=[0, dx*nLat, 0, dtout*nTime]) \n",
    "    clb = plt.colorbar(im, ax = ax)\n",
    "    ax.set(xlabel = r'$x$', ylabel=r'$t$')\n",
    "    plt.show()\n",
    "    return"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#for sim in all_right_decaying_sims:\n",
    "#    col = 0\n",
    "#    plot_real_space_data(sim, col)\n",
    "#    plot_real_space_slices(sim, col, 0, 100, 50, nLat)    #(sim, i, j, steps, max)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Power Spectrum"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "field_spectrum = [paper_norm / ((dk*k)**2 + m2eff)**0.25 for k in range(nyq)]\n",
    "phi_x = np.fft.irfft(field_spectrum, nLat) + phi_initial\n",
    "phi_k = np.fft.rfft(phi_x, nLat)\n",
    "\n",
    "momentum_spectrum = [paper_norm * ((dk*k)**2 + m2eff)**0.25 for k in range(nyq)]\n",
    "dt_phi_x = np.fft.irfft(momentum_spectrum, nLat) + dt_phi_initial\n",
    "dt_phi_k = np.fft.rfft(dt_phi_x, nLat)\n",
    "\n",
    "def power_spectrum(col, k):\n",
    "    if col == 0:\n",
    "        return phi_k[k] * np.conj(phi_k[k])\n",
    "    elif col == 1:\n",
    "        return dt_phi_k[k] * np.conj(dt_phi_k[k])\n",
    "    \n",
    "def data_pspec_from_rspec(col, sim, k):\n",
    "    timeslice = random.randrange(nTime)\n",
    "    field_slice = all_real_data[sim][col][timeslice]\n",
    "    fft_field_slice = np.fft.irfft(field_slice, nLat)\n",
    "    return fft_field_slice[k] * np.conj(fft_field_slice[k])\n",
    "\n",
    "def data_pspec_from_rspec_sim_averaged(col, k):\n",
    "    return np.mean([data_pspec_from_rspec(col, sim, k).real for sim in all_non_decaying_sims])\n",
    "\n",
    "def power_spectrum_theoretical_vs_data(col):\n",
    "    plt.figure(figsize=(7, 5))\n",
    "    plt.plot(dk*np.arange(1, spec), [data_pspec_from_rspec_sim_averaged(col, k) for k in range(1, spec)], 'go')\n",
    "    plt.plot(dk*np.arange(1, spec), [power_spectrum(col, k).real for k in range(1, spec)], 'r--')\n",
    "    plt.xlabel(r'$k$'); plt.ylabel(r'Power Spectrum'); plt.grid(); plt.show()\n",
    "    return"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#To compare with case of free Gaussian field, select simulations which do not decay. \n",
    "#If need to use the rest, consider only part of simulations before bubble forms\n",
    "\n",
    "power_spectrum_theoretical_vs_data(0)\n",
    "\n",
    "# Free field approximation not true at low separation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Peak-Peak Correlator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "def data_stat(sim_selection, smoothing_scale):\n",
    "    data = [smoothen(all_real_data[sim][0][random.randrange(nTime)], smoothing_scale)[random.randrange(nLat)] for sim in sim_selection]\n",
    "    return stat.stdev(data), np.mean(data)\n",
    "\n",
    "def find_peak_positions(field_slice, peak_threshold):\n",
    "    \"\"\" Finds x coordinate of peaks in masked field with mask applied at threshold. \"\"\"\n",
    "    peak_coord = scs.find_peaks(field_slice, height = peak_threshold)[0].tolist()\n",
    "    if field_slice[-1] > peak_threshold and field_slice[0] > peak_threshold and field_slice[-1] != field_slice[0]:\n",
    "        if field_slice[0] > field_slice[-1] and field_slice[0] > field_slice[1]:\n",
    "            peak_coord.append(0)\n",
    "        elif field_slice[0] < field_slice[-1] and field_slice[-1] > field_slice[-2]:\n",
    "            peak_coord.append(len(field_slice)-1) # this minds potential boundary discontinuities\n",
    "    return peak_coord\n",
    "\n",
    "def find_max_peak(field_slice):\n",
    "    peak_coord = scs.find_peaks(field_slice)[0].tolist()\n",
    "    if field_slice[0] > field_slice[-1] and field_slice[0] > field_slice[1]:\n",
    "        peak_coord.append(0)\n",
    "    if field_slice[-1] > field_slice[0] and field_slice[-1] > field_slice[-2]:\n",
    "        peak_coord.append(len(field_slice)-1)\n",
    "    peak_heights = [field_slice[coord] for coord in peak_coord]\n",
    "    return field_slice.tolist().index(np.max(peak_heights)), np.max(peak_heights), peak_coord, peak_heights\n",
    "\n",
    "def smoothen(field_slice, sigma):\n",
    "    pbc = [j-1 if j < nLat/2+1 else nLat-j+1 for j in range(1, nLat+1)]\n",
    "    window = [np.exp(- 0.5 * (i*dx/sigma)**2) / np.sqrt(2*np.pi) / sigma for i in pbc]\n",
    "    real_filter = np.fft.rfft(window / sum(window), len(field_slice))\n",
    "\n",
    "    fft_field_slice = np.fft.rfft(field_slice, len(field_slice))\n",
    "    smooth_fft_field_slice = [real_filter[k] * fft_field_slice[k] for k in range(len(fft_field_slice))]\n",
    "    return np.fft.irfft(smooth_fft_field_slice, len(field_slice))\n",
    "\n",
    "def nu2phi(x):\n",
    "    return x*moment0+phi_initial\n",
    "def phi2nu(x):\n",
    "    return (x-phi_initial)/moment0\n",
    "\n",
    "def peak_number_density_est(sim_selection, smoothing_scale, peak_threshold):\n",
    "    all_field_slices = [all_real_data[sim][0][random.randrange(nTime)] for sim in sim_selection]\n",
    "    smooth_field_slice = [smoothen(slice, smoothing_scale) for slice in all_field_slices]\n",
    "    peak_coordinates = [find_peak_positions(field_slice, peak_threshold) for field_slice in smooth_field_slice]\n",
    "    N_gal = sum([len(coords) for coords in peak_coordinates])\n",
    "    return N_gal / len(smooth_field_slice[0]) / len(sim_selection)\n",
    "\n",
    "def analytic_peak_number_density(peak_threshold_nu):\n",
    "    thr = peak_threshold_nu\n",
    "    return 0.158979+np.exp(-0.5*thr**2)*(0.0643448+0.0643448*ssp.erf(0.312973*thr))-0.158979*ssp.erf(0.773274*thr)\n",
    "\n",
    "def correlators(sim_selection, smoothing_scale, th, R):\n",
    "    r_correlator = 0.\n",
    "    for sim in sim_selection:\n",
    "        t = random.randrange(nTime)\n",
    "        field_slice = smoothen(all_real_data[sim][0][t], smoothing_scale)\n",
    "        peak_coordinates = find_peak_positions(field_slice, th)\n",
    "        N_gal = len(peak_coordinates)\n",
    "        if N_gal != 0:\n",
    "            peak_list = [i-nLat if i >= nLat else i for i in np.asarray(peak_coordinates)+R]\n",
    "            rivolo_check = sum([1. for i in peak_list if i in peak_coordinates])\n",
    "            r_correlator += rivolo_check * len(field_slice) / N_gal**2\n",
    "    return r_correlator / len(sim_selection) - 1.\n",
    "\n",
    "max_sep = 100\n",
    "gaussian_filter = 1. / (dk * spec / 2.)\n",
    "sim_selection = all_non_decaying_sims[::]\n",
    "moment0 = data_stat(sim_selection, gaussian_filter)[0]\n",
    "\n",
    "#outfile05 = pickle_location+'peak_th05'+suffix+'.npy'\n",
    "#np.save(outfile05, [correlators(sim_selection, gaussian_filter, 0.5*moment0 + phi_initial, R) for R in range(1, max_sep, 1)])\n",
    "\n",
    "#outfile1 = pickle_location+'peak_th1'+suffix+'.npy'\n",
    "#np.save(outfile1, [correlators(sim_selection, gaussian_filter, 1*moment0 + phi_initial, R) for R in range(1, max_sep, 1)])\n",
    "\n",
    "#outfile2 = pickle_location+'peak_th2'+suffix+'.npy'\n",
    "#np.save(outfile2, [correlators(sim_selection, gaussian_filter, 2*moment0 + phi_initial, R) for R in range(1, max_sep, 1)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_peak_number_density(sim_selection, smoothing_scale):\n",
    "    moment0 = data_stat(sim_selection, smoothing_scale)[0]\n",
    "    nu = math.ceil(phi2nu(2*np.pi))\n",
    "    th = [i/4. for i in range(4*nu+1)]\n",
    "    data = [peak_number_density_est(sim_selection, smoothing_scale, nu2phi(i)) for i in th]\n",
    "    thr = [i/100. for i in range(100*nu+1)]\n",
    "    prediction = [analytic_peak_number_density(i)*dx for i in thr]\n",
    "\n",
    "    fig, ax = plt.subplots(figsize=(8,4))\n",
    "    ax.plot(thr, prediction, color='y', ls='--', label='Peak number density')\n",
    "    ax.plot(th, data, 'bo', label='Data')\n",
    "    ax.axvline(phi2nu(right_phi_at_V_max.x))\n",
    "    ax.axvline(phi2nu(np.pi), color = 'y', ls = '-')\n",
    "    ax.axvline(phi2nu(2*np.pi), color = 'y', ls = '-')\n",
    "    secax = ax.secondary_xaxis('top', functions=(nu2phi, phi2nu))\n",
    "    secax.set_xlabel(r'$\\phi$'); plt.xlabel(r'$\\nu_t$'); plt.ylabel(r'$n(\\nu_t)$')\n",
    "    plt.legend(); plt.grid(); plt.show()\n",
    "    return\n",
    "\n",
    "def plot_peak_peak_correlator(max_sep):\n",
    "    plt.figure(figsize=(7, 5))\n",
    "    rivolo_correlator = np.load(outfile05)[:max_sep]\n",
    "    plt.plot([i*dx for i in range(1, len(rivolo_correlator)+1)], rivolo_correlator, 'ro', label=r'$\\nu_t = 0.5$')\n",
    "    rivolo_correlator = np.load(outfile1)[:max_sep]\n",
    "    plt.plot([i*dx for i in range(1, len(rivolo_correlator)+1)], rivolo_correlator, 'go', label=r'$\\nu_t = 1$')\n",
    "    rivolo_correlator = np.load(outfile2)[:max_sep]\n",
    "    plt.plot([i*dx for i in range(1, len(rivolo_correlator)+1)], rivolo_correlator, 'bo', label=r'$\\nu_t = 2$')\n",
    "    plt.xlabel(r'$r$'); plt.ylabel(r'$\\xi_{pk}(r)$')\n",
    "    plt.grid(); plt.legend(); plt.show()\n",
    "    return"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    ". It is not a bad estimate to start looking for bubbles at turning point in potential, since that is only at 2 std in peak height\n",
    "\n",
    ". Out of the total number of peaks at 2 and above std, which is obtainable from data, how many end up as bubbles? Simply count bubbles and divide by total number\n",
    "\n",
    ". Can count bubbles by looking for signature which we compute in the rest of this Notebook. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "#plot_peak_number_density(sim_selection, gaussian_filter)\n",
    "#plot_peak_peak_correlator(max_sep)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Triage"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def time_limits_of_bubble(sim, bubble_limit):\n",
    "    filter_size = 1 / (dk * 5)\n",
    "    simulation = all_real_data[sim][0]\n",
    "    for t in range(len(simulation)):\n",
    "        right_phi_x = 0.\n",
    "        field_slice = smoothen(simulation[t], filter_size)\n",
    "        for phi_x in field_slice:\n",
    "            if phi_x >= right_phi_at_V_max.x: #2*phi_initial:\n",
    "                right_phi_x += 1.\n",
    "        if (t == nTime-1 or right_phi_x >= nLat * bubble_limit):\n",
    "            t_max = t\n",
    "            t_min = t_max - bubble_limit * nTime\n",
    "            if t_min < 0: t_min = 0\n",
    "            return int(t_min), int(t_max)\n",
    "\n",
    "def time_of_bubble_start(sim, bubble_limit):\n",
    "    t_max = time_limits_of_bubble(sim, bubble_limit)[-1]\n",
    "    list = []\n",
    "    filter_size = 1 / (dk * 10)\n",
    "    simulation = all_real_data[sim][0]\n",
    "    for t in range(t_max):\n",
    "        right_phi_x = 0.\n",
    "        field_slice = smoothen(simulation[t], filter_size)\n",
    "        for phi_x in field_slice:\n",
    "            if phi_x >= right_phi_at_V_max.x:\n",
    "                right_phi_x += 1.\n",
    "        if right_phi_x <= nLat * 0.0025:\n",
    "            list.append(t)\n",
    "        else:\n",
    "            list.append(0)\n",
    "    return max(list)\n",
    "\n",
    "def triage1(sim_selection):\n",
    "    print('Before: ', len(sim_selection))\n",
    "    for sim in sim_selection:\n",
    "        simulation = all_real_data[sim][0]\n",
    "        filter_size = 1. / ( dk * 5. )\n",
    "        light_cone = filter_size * dtout / dx # distance travelled by light in x axis within one time step\n",
    "        coords = np.empty((nTime, 0)).tolist()\n",
    "        for t in range(nTime):\n",
    "            field_slice = smoothen(simulation[t].tolist(), filter_size)\n",
    "            coords[t] = [x for x in range(nLat) if field_slice[x] >= 1.8 * phi_initial]\n",
    "            if (t > 0 and len(coords[t]) > 1 and len(coords[t-1]) > 1):\n",
    "                if (max(coords[t]) > max(coords[t-1]) + light_cone or min(coords[t]) < min(coords[t-1]) - light_cone):\n",
    "                    if not (max(coords[t]) == nLat-1 and min(coords[t]) == 0):\n",
    "                        sim_selection.remove(sim)\n",
    "    print('After: ', len(sim_selection))\n",
    "    return sim_selection\n",
    "\n",
    "def triage2(sim_selection):\n",
    "    print('Before: ', len(sim_selection))\n",
    "    filter_size = 1. / ( dk * 5. )\n",
    "    bubble_limit = 0.2\n",
    "    for sim in sim_selection:\n",
    "        t_min, t_max = time_limits_of_bubble(sim, bubble_limit)\n",
    "        if t_max != nTime-1:\n",
    "            peak_list = []\n",
    "            for t in np.arange(t_min, t_max+1):\n",
    "                field_slice = smoothen(all_real_data[sim][0][t], filter_size)\n",
    "                bubble_position_at_t = [x for x in range(len(field_slice)) if field_slice[x] > 1.8*phi_initial]\n",
    "                if len(bubble_position_at_t) > 0:\n",
    "                    peak_list.append(int(np.mean(bubble_position_at_t)))\n",
    "            if peak_list != []:\n",
    "                if stat.stdev(peak_list) < nLat*0.025:\n",
    "                    sim_selection.remove(sim)\n",
    "    print('After: ', len(sim_selection))\n",
    "    return sim_selection\n",
    "\n",
    "simsel0 = all_right_decaying_sims[::]\n",
    "simsel = simsel0\n",
    "#simsel = triage1(simsel0)\n",
    "#simsel = triage2(simsel0)\n",
    "\n",
    "#for sim in simsel:\n",
    "#    simulation = [smoothen(all_real_data[sim][0][t], 1. / ( dk * 5. )) for t in range(nTime)]\n",
    "#    plot_masked_field(simulation, right_phi_at_V_max.x)\n",
    "    \n",
    "#for sim in all_right_decaying_sims:\n",
    "#    if sim not in simsel1:\n",
    "#        simulation = [smoothen(all_real_data[sim][0][t], 1. / ( dk * 5. )) for t in range(nTime)]\n",
    "#        plot_masked_field(simulation, right_phi_at_V_max.x)\n",
    "\n",
    "#for sim in all_right_decaying_sims:\n",
    "#    if sim not in simsel2:\n",
    "#        simulation = [smoothen(all_real_data[sim][0][t], 1. / ( dk * 5. )) for t in range(nTime)]\n",
    "#        plot_masked_field(simulation, right_phi_at_V_max.x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Tracking Bubble "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_chosen_field_slices(sim, sigma, t_min, t_max):\n",
    "    fig = plt.figure(figsize=(20,4))\n",
    "    gs = gridspec.GridSpec(1, 2) \n",
    "    ax = [[],[]]\n",
    "    ax[0] = plt.subplot(gs[0])\n",
    "    ax[1] = plt.subplot(gs[1])\n",
    "\n",
    "    field_simulation = all_real_data[sim][0]\n",
    "    signal = np.asarray(field_simulation[t_min])\n",
    "    clean_signal = smoothen(signal, sigma)\n",
    "    noise = signal - clean_signal\n",
    "\n",
    "    ax[0].plot(np.arange(nLat), signal)\n",
    "    ax[0].plot(np.arange(nLat), clean_signal,'r', label='t = '+str(t_min))\n",
    "    ax[0].plot(np.arange(nLat), noise,'g.')\n",
    "    ax[0].legend(); ax[0].grid()\n",
    "\n",
    "    signal = np.asarray(field_simulation[t_max])\n",
    "    clean_signal = smoothen(field_simulation[t_max], sigma)\n",
    "    noise = signal - clean_signal\n",
    "\n",
    "    ax[1].plot(np.arange(nLat), signal)\n",
    "    ax[1].plot(np.arange(nLat), clean_signal,'r', label='t = '+str(t_max))\n",
    "    ax[1].plot(np.arange(nLat), noise,'g.')\n",
    "    ax[1].legend(); ax[1].grid(); plt.show()\n",
    "    return\n",
    "\n",
    "def plot_slice(field_slice, sigma):\n",
    "    plt.figure(figsize=(10,5))\n",
    "    plt.plot(np.arange(len(field_slice)), field_slice)\n",
    "    field_slice_sm = smoothen(field_slice, sigma)\n",
    "    plt.plot(np.arange(len(field_slice_sm)), field_slice_sm, 'b-')\n",
    "    coord, height, _, _ = find_max_peak(field_slice_sm)\n",
    "    plt.plot(coord, height, 'bo', label = 'max = {:.2f}'.format(height))\n",
    "    plt.xlabel(r'$x$'); plt.grid(); plt.legend(); plt.show()\n",
    "    return\n",
    "\n",
    "def plot_simulation(sim, sigma, t_min, t_max):\n",
    "    simulation = all_real_data[sim][0]\n",
    "    fig, ax = plt.subplots(1, 2, figsize = (5 * 2, 4), sharey = 'row')\n",
    "    im = ax[0].imshow(simulation, aspect='auto', interpolation='none', origin='lower') #, extent=[0, dx*nLat, 0, dtout*nTime])\n",
    "    ax[0].plot(np.arange(len(simulation[0])), np.ones(len(simulation[0]))*t_min, 'r-')\n",
    "    ax[0].plot(np.arange(len(simulation[0])), np.ones(len(simulation[0]))*t_max, 'y-')\n",
    "    clb = plt.colorbar(im, ax = ax[0])\n",
    "    clb.set_label(r'$\\phi$', labelpad=-48, y=1.08, rotation=0)\n",
    "    ax[0].set(xlabel = r'$x$', ylabel = r'$t$')\n",
    "\n",
    "    im = ax[1].imshow([smoothen(field_slice, sigma) for field_slice in simulation], aspect='auto', interpolation='none', origin='lower')#, extent=[0, dx*nLat, 0, dtout*nTime])\n",
    "    ax[1].plot(np.arange(len(simulation[0])), np.ones(len(simulation[0]))*t_min, 'r-')\n",
    "    ax[1].plot(np.arange(len(simulation[0])), np.ones(len(simulation[0]))*t_max, 'y-')\n",
    "    clb = plt.colorbar(im, ax = ax[1])\n",
    "    clb.set_label(r'$\\phi$', labelpad=-28, y=1.08, rotation=0)\n",
    "    ax[1].set(xlabel = r'$x$', ylabel = r'$t$')\n",
    "    plt.show()\n",
    "    return\n",
    "\n",
    "def plot_field_and_momentum_slice(sim, sigma, time):\n",
    "    fig = plt.figure(figsize=(20,4))\n",
    "    gs = gridspec.GridSpec(1, 2); ax = [[],[]]\n",
    "    ax[0] = plt.subplot(gs[0]); ax[1] = plt.subplot(gs[1])\n",
    "    \n",
    "    field_slice = all_real_data[sim][0][time]\n",
    "    momentum_slice = all_real_data[sim][1][time]\n",
    "    ax[0].plot(dx*np.arange(len(field_slice)), field_slice, 'k-')\n",
    "    field_slice_sm = smoothen(field_slice, sigma)\n",
    "    ax[0].plot(dx*np.arange(len(field_slice_sm)), field_slice_sm, 'b-')\n",
    "    coord, height, _, _ = find_max_peak(field_slice_sm)\n",
    "    ax[0].plot(dx*coord, height, 'bo', label = 'max = {:.2f}'.format(height))\n",
    "    ax[0].set(xlabel=r'$x$'); ax[0].grid(); ax[0].legend()\n",
    "\n",
    "    ax[1].plot(dx*np.arange(len(momentum_slice)), momentum_slice, 'k-')\n",
    "    momentum_slice_sm = smoothen(momentum_slice, sigma)\n",
    "    ax[1].plot(dx*np.arange(len(momentum_slice_sm)), momentum_slice_sm, 'b-')\n",
    "    min_momentum = np.min(np.abs(momentum_slice_sm))\n",
    "    coord_min = np.abs(momentum_slice_sm).tolist().index(min_momentum)\n",
    "    coord_max, max_momentum, _, _ = find_max_peak(momentum_slice_sm)\n",
    "    ax[1].plot(dx*coord_max, max_momentum, 'bo', label = 'max = {:.4f}'.format(max_momentum))\n",
    "    ax[1].set(xlabel=r'$x$'); ax[1].grid(); ax[1].legend(); plt.show()\n",
    "    return\n",
    "\n",
    "def plot_max_trajectory(sim, sigma, t_min, t_max):\n",
    "    fig = plt.figure(figsize=(20,4))\n",
    "    gs = gridspec.GridSpec(1, 2); ax = [[],[]]\n",
    "    ax[0] = plt.subplot(gs[0]); ax[1] = plt.subplot(gs[1])\n",
    "    time_list = np.arange(t_min, t_max+1).tolist()\n",
    "\n",
    "    col = 0\n",
    "    simulation = [all_real_data[sim][col][t] for t in time_list]\n",
    "    smooth_simulation = [smoothen(field_slice, sigma) for field_slice in simulation]\n",
    "    simulation_peak_stats = [find_max_peak(smooth_field_slice) for smooth_field_slice in smooth_simulation]\n",
    "    bubble_trajectory = [slice_peak_stats[0] for slice_peak_stats in simulation_peak_stats]\n",
    "    bubble_height = [slice_peak_stats[1] for slice_peak_stats in simulation_peak_stats]\n",
    "\n",
    "    ax[0].plot(dx*np.asarray(bubble_trajectory), bubble_height, 'ko-', ms=3)\n",
    "    ax[0].plot(dx*bubble_trajectory[0], bubble_height[0], 'ro', label='t = '+str(t_min))\n",
    "    ax[0].plot(dx*bubble_trajectory[-1], bubble_height[-1], 'yo', label='t = '+str(t_max))\n",
    "    ax[0].set_xlim((0,lenLat)); ax[0].set_xlabel(r'$x$'); ax[0].set_ylabel(r'Max '+str(titles[col]))\n",
    "    ax[0].grid(); ax[0].legend()\n",
    "\n",
    "    col = 1\n",
    "    momentum_simulation = [all_real_data[sim][col][t] for t in time_list]\n",
    "    smooth_momentum_simulation = [smoothen(field_slice, sigma) for field_slice in momentum_simulation]\n",
    "    bubble_momentum_trajectory = bubble_trajectory\n",
    "    bubble_momentum_height = [smooth_momentum_simulation[t][bubble_trajectory[t]] for t in range(len(time_list))]\n",
    "\n",
    "    ax[1].plot(dx*np.asarray(bubble_momentum_trajectory), bubble_momentum_height, 'ko-', ms=3)\n",
    "    ax[1].plot(dx*bubble_momentum_trajectory[0], bubble_momentum_height[0], 'ro', label='t = '+str(t_min))\n",
    "    ax[1].plot(dx*bubble_momentum_trajectory[-1], bubble_momentum_height[-1], 'yo', label='t = '+str(t_max))\n",
    "    ax[1].set_xlim((0,lenLat)); ax[1].set_xlabel(r'$x$'); ax[1].set_ylabel(r'Max '+str(titles[col]))\n",
    "    ax[1].grid(); ax[1].legend(); plt.show()\n",
    "    return #bubble_trajectory, bubble_height\n",
    "\n",
    "def plot_surviving_fraction(sim, sigma, t_min, t_max, threshold):\n",
    "    plt.figure(figsize=(7, 5))\n",
    "    simulation = all_real_data[sim][0]\n",
    "    time_list = np.arange(len(simulation)).tolist()\n",
    "    count = [masked_field_slice(simulation[timeslice], threshold)[-1] for timeslice in range(len(simulation))]\n",
    "    fraction = [c/nLat for c in count]\n",
    "\n",
    "    plt.plot(np.asarray(time_list), fraction, 'ko-', ms=3)\n",
    "    plt.plot(time_list.index(t_min), fraction[time_list.index(t_min)], 'ro', label='t = '+str(time_list.index(t_min)))\n",
    "    plt.plot(time_list.index(t_max), fraction[time_list.index(t_max)], 'yo', label='t = '+str(time_list.index(t_max)))\n",
    "\n",
    "    smooth_count = [masked_field_slice(smoothen(simulation[timeslice], sigma), threshold)[-1] for timeslice in range(len(simulation))]\n",
    "    smooth_fraction = [c/nLat for c in smooth_count]\n",
    "    plt.plot(np.asarray(time_list), smooth_fraction, color='dimgray', marker='o', ls='-', ms=3)\n",
    "    plt.plot(time_list.index(t_min), smooth_fraction[time_list.index(t_min)], 'ro')\n",
    "    plt.plot(time_list.index(t_max), smooth_fraction[time_list.index(t_max)], 'yo')\n",
    "    plt.ylabel(r'Fraction above threshold = {:.2f}'.format(threshold)); plt.xlabel(r'$t$')\n",
    "    plt.legend(); plt.grid(); plt.show()\n",
    "    return"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Choose sample simulation for data analysis\n",
    "sim_selection = simsel\n",
    "sim_eg = sim_selection[0]\n",
    "\n",
    "lim_bubble = 0.2\n",
    "sigma = 1 / (dk * 8)\n",
    "\n",
    "t_min, t_max = time_limits_of_bubble(sim_eg, lim_bubble)\n",
    "#t_min = time_of_bubble_start(sim_eg, lim_bubble)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "#plot_simulation(sim_eg, sigma, t_min, t_max)\n",
    "#plot_chosen_field_slices(sim_eg, sigma, t_min, t_max)\n",
    "\n",
    "#plot_field_and_momentum_slice(sim_eg, sigma, t_max)\n",
    "\n",
    "#plot_max_trajectory(sim_eg, sigma, t_min, t_max)\n",
    "\n",
    "#threshold = right_phi_at_V_max.x\n",
    "#plot_surviving_fraction(sim_eg, sigma, t_min, t_max, threshold)\n",
    "\n",
    "#animate_field(field_simulation, field_simulation, t_min, t_max)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Finding trajectory of single peaks within simulation "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "def find_average_bubble_profile(trajectory):\n",
    "    field_list_in_reverse = [field_in_simulation[::-1] for field_in_simulation in trajectory[0]]\n",
    "    momentum_list_in_reverse = [field_in_simulation[::-1] for field_in_simulation in trajectory[1]]\n",
    "    xerr = np.nanstd(np.array(list(zip_longest(*field_list_in_reverse)), dtype=float), axis=1, ddof=1)\n",
    "    xerr = [x for x in xerr if str(x) != 'nan'][::-1]\n",
    "    average_field = np.nanmean(np.array(list(zip_longest(*field_list_in_reverse)), dtype=float), axis=1)[:len(xerr)][::-1]\n",
    "    yerr = np.nanstd(np.array(list(zip_longest(*momentum_list_in_reverse)), dtype=float), axis=1, ddof=1)\n",
    "    yerr = [y for y in yerr if str(y) != 'nan'][::-1]\n",
    "    average_momentum = np.nanmean(np.array(list(zip_longest(*momentum_list_in_reverse)), dtype=float), axis=1)[:len(yerr)][::-1]\n",
    "    return average_field, average_momentum, xerr, yerr\n",
    "\n",
    "def trajectory_of_max(sim_selection, bubble_limit, sigma):\n",
    "    light_cone = sigma * dtout / dx # distance travelled by light in x axis within one time step\n",
    "    fld, mnt = [], []\n",
    "    for sim in sim_selection:\n",
    "        t_min, t_max = time_limits_of_bubble(sim, bubble_limit)\n",
    "#        t_min = time_of_bubble_start(sim, bubble_limit)\n",
    "        time_list = np.arange(t_min, t_max+1)\n",
    "\n",
    "        if t_max != nTime - 1:\n",
    "            field_simulation_sm = [smoothen(all_real_data[sim][0][t], sigma) for t in time_list[::-1]]\n",
    "            momentum_simulation_sm = [smoothen(all_real_data[sim][1][t], sigma) for t in time_list[::-1]]\n",
    "\n",
    "            # t = t_max case:\n",
    "            target_peak = find_max_peak(field_simulation_sm[0])[0]\n",
    "            peak_field_traj = [field_simulation_sm[0][target_peak]]\n",
    "            peak_momentum_traj = [momentum_simulation_sm[0][target_peak]]\n",
    "\n",
    "            multiplier = 1.\n",
    "            for t in range(1, len(time_list)):\n",
    "                # produce the future causal lightcone for the peak propagation\n",
    "                possible_peaks = []\n",
    "                distance_to_next_peak = light_cone * multiplier\n",
    "                left_ray = target_peak - light_cone * multiplier\n",
    "                right_ray = target_peak + light_cone * multiplier\n",
    "\n",
    "                peak_coords_on_slice = find_peak_positions(field_simulation_sm[t], phi_initial)\n",
    "                for peak in peak_coords_on_slice:\n",
    "                    if ((left_ray <= peak <= right_ray) or \n",
    "                        (left_ray < 0 and left_ray <= peak - nLat <= right_ray) or \n",
    "                        (right_ray >= nLat and left_ray <= peak + nLat <= right_ray)):\n",
    "                        if np.abs(target_peak - peak) < distance_to_next_peak:\n",
    "                            distance_to_next_peak = np.abs(target_peak - peak)\n",
    "                            possible_peaks.append(peak)\n",
    "                if possible_peaks != []:\n",
    "                    target_peak = possible_peaks[-1]\n",
    "                    if peak_field_traj[-1]*0.8 <= field_simulation_sm[t][target_peak] <= peak_field_traj[-1]*1.2:\n",
    "#                    if field_simulation_sm[t][target_peak] > phi_initial + (right_phi_at_V_max.x - phi_initial) / 2.:\n",
    "                        peak_field_traj.append(field_simulation_sm[t][target_peak])\n",
    "                        peak_momentum_traj.append(momentum_simulation_sm[t][target_peak])\n",
    "                        multiplier = 1.\n",
    "                    else:\n",
    "                        peak_field_traj = []\n",
    "                        break\n",
    "                else:\n",
    "                    multiplier += 1. # if we do find a peak within the lightcone, reset multiplier\n",
    "            if peak_field_traj != []:\n",
    "                fld.append(peak_field_traj[::-1])\n",
    "                mnt.append(peak_momentum_traj[::-1])\n",
    "    return fld, mnt\n",
    "\n",
    "def plot_trajectory_of_max(boolean, sim_selection, bubble_limit, sigma):\n",
    "    trajectory = trajectory_of_max(sim_selection, bubble_limit, sigma)\n",
    "    fld = trajectory[0]; mnt = trajectory[1]\n",
    "    print('# trajectories: ' + str(len(fld)) + ' = ' + '# simulations: ' + str(len(sim_selection)))\n",
    "    print(len(fld) == len(sim_selection))\n",
    "\n",
    "    fig = plt.figure(figsize=(7,5))\n",
    "    for sim in range(len(fld)):\n",
    "        plt.plot(fld[sim], mnt[sim], 'o-', ms = 3)\n",
    "    plt.axvline(right_phi_at_V_max.x)\n",
    "    plt.axvline(np.pi, color = 'y', ls = '-')\n",
    "    plt.axvline(2*np.pi, color = 'y', ls = '-')\n",
    "    plt.xlabel(r'$\\phi(x)$')\n",
    "    plt.ylabel(r'$\\partial_t \\phi(x)$')\n",
    "    plt.savefig(plots_file+'trajectory_of_max_bundle'+suffix+'.png');\n",
    "    plt.grid(); plt.show()\n",
    "\n",
    "    fig = plt.figure(figsize=(7,5))\n",
    "    average_field, average_momentum, xerr, yerr = find_average_bubble_profile(trajectory)\n",
    "    plt.errorbar(average_field, average_momentum, xerr = xerr, yerr = yerr, color = 'k', marker='o', ecolor = 'green')\n",
    "    plt.axvline(right_phi_at_V_max.x)\n",
    "    plt.axvline(np.pi, color = 'y', ls = '-')\n",
    "    plt.axvline(2*np.pi, color = 'y', ls = '-')\n",
    "    plt.xlabel(r'Average $\\phi(x)$ of bubble peak')\n",
    "    plt.ylabel(r'Average $\\partial_t \\phi(x)$ of bubble peak')\n",
    "    plt.savefig(plots_file+'trajectory_of_max'+suffix+'.png');\n",
    "    plt.grid(); plt.show()\n",
    "\n",
    "    if boolean:\n",
    "        for sim in range(len(fld)):\n",
    "            fig = plt.figure(figsize=(7,5))\n",
    "            plt.plot(fld[sim], mnt[sim], 'o-', ms = 3)\n",
    "            plt.axvline(right_phi_at_V_max.x)\n",
    "            plt.axvline(np.pi, color = 'y', ls = '-')\n",
    "            plt.axvline(2*np.pi, color = 'y', ls = '-')\n",
    "            plt.xlabel(r'$\\phi(x)$')\n",
    "            plt.ylabel(r'$\\partial_t \\phi(x)$')\n",
    "            plt.grid(); plt.show()\n",
    "    return"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "#plot_trajectory_of_max(False, sim_selection, lim_bubble, sigma)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Average bubble"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "def truncateNum(num, decimal_places):\n",
    "    StrNum = str(num)\n",
    "    p = StrNum.find(\".\") + 1 + decimal_places\n",
    "    return ( StrNum[0:p] )\n",
    "\n",
    "def cut_out_coordinates(sim_selection, bubble_limit):\n",
    "    bubble_data = []\n",
    "    for sim in sim_selection:\n",
    "#       t_min, t_max = time_limits_of_bubble(sim, bubble_limit)\n",
    "        breakLoop = False\n",
    "        t_min, t_max = [], []\n",
    "        for t in range(nTime):\n",
    "            if not breakLoop:\n",
    "                true_V = 0\n",
    "                for V_phi in all_real_data[sim][-1][t]:\n",
    "                    if V_phi < V(np.pi): \n",
    "                        true_V += 1\n",
    "                if true_V >= nLat * 0.04 :\n",
    "                    t_min.append(t)\n",
    "                if (true_V >= nLat * 0.07 or t == nTime-1) :\n",
    "                    t_max.append(t)\n",
    "                if (true_V >= nLat * bubble_limit or t == nTime-1) :\n",
    "                    t_end = t\n",
    "                    t_beginning = t_end - 250\n",
    "                    if t_beginning < 0 : t_beginning = 0\n",
    "                    breakLoop = True\n",
    "\n",
    "        if t_min != []:\n",
    "            time_list_averaging = np.arange(min(t_min), min(t_max)+1)[::-1]\n",
    "            print(len(time_list_averaging))\n",
    "            time_bubble = np.arange(t_beginning, t_end+1)[::-1]\n",
    "            peak_list = []\n",
    "            if (t_end != nTime-1) and (t_beginning != 0):\n",
    "#                filter_size = 1 / (dk * 5)\n",
    "                for t in time_list_averaging:\n",
    "#                    potential_slice = all_real_data[sim][-1][t]\n",
    "#                    bubble_position_at_t = [x for x in range(len(potential_slice)) if potential_slice[x] < V(np.pi)]\n",
    "                    field_slice = all_real_data[sim][0][t]\n",
    "                    bubble_position_at_t = [x for x in range(len(field_slice)) if field_slice[x] > math.floor(phi_bound)]\n",
    "                    if len(bubble_position_at_t) > 0:\n",
    "                        peak_list.append(np.mean(bubble_position_at_t))\n",
    "\n",
    "                target_peak = int(round(np.mean(peak_list)))\n",
    "                if stat.stdev(peak_list) < nLat*0.01:\n",
    "                    left = target_peak - nLat//2\n",
    "                    right = target_peak + nLat//2\n",
    "                    # periodic boundary conditions\n",
    "                    if left >= 0 and right < nLat: \n",
    "                        coord_list = np.arange(nLat)[left:right]\n",
    "                    elif left < 0 and right < nLat: \n",
    "                        coord_list = np.arange(nLat)[left+nLat:].tolist() + np.arange(nLat)[:right].tolist()\n",
    "                    elif left >= 0 and right >= nLat: \n",
    "                        coord_list = np.arange(nLat)[left:].tolist() + np.arange(nLat)[:right-nLat].tolist()\n",
    "                    bubble_data.append((sim, coord_list, time_bubble))\n",
    "    print('# valid simulations: ', len(bubble_data))\n",
    "    return bubble_data\n",
    "\n",
    "def stack_bubbles(overall_bubble_data, col):\n",
    "    bubbles, time, average_bubble, average_bubble_error = [], [], [], []\n",
    "    for bubble_data in overall_bubble_data:\n",
    "        simulation, coord_list, time_bubble = bubble_data\n",
    "        if col != 1:\n",
    "            field = [[all_real_data[simulation][col][t][i] for i in coord_list] for t in time_bubble]\n",
    "        else:\n",
    "            field = [[all_real_data[simulation][col][t][i]**2 for i in coord_list] for t in time_bubble]\n",
    "        bubbles.append(field)\n",
    "        time.append(len(time_bubble))\n",
    "        n_coord = len(coord_list)\n",
    "\n",
    "    field = [ [ [ t for t in range(time[sim]) ] for sim in range(len(bubbles)) ] for coord in range(n_coord)]\n",
    "    for coord in range(n_coord):\n",
    "        for sim in range(len(bubbles)):\n",
    "            for t in range(time[sim]):\n",
    "                field[coord][sim][t] = bubbles[sim][t][coord]\n",
    "    for coordinate in field:\n",
    "        xerr_field = np.nanstd(np.array(list(zip_longest(*coordinate)), dtype=float), axis=1, ddof=1)\n",
    "        xerr_field = [x for x in xerr_field if str(x) != 'nan'][::-1]\n",
    "        average_bubble_error.append(xerr_field)\n",
    "        mean_field = np.nanmean(np.array(list(zip_longest(*coordinate)), dtype=float), axis=1)\n",
    "        average_bubble.append(mean_field[:len(xerr_field)][::-1])\n",
    "    return np.transpose(average_bubble, (1, 0)), np.transpose(average_bubble_error, (1, 0)), min(time)\n",
    "\n",
    "def coleman_match(average_bubble):\n",
    "    # Coleman solution from Mathematica file: ColemanBubble\n",
    "    decimal_places = 5\n",
    "    x_list = [x for x in range(len(coleman_bubble[0])) if truncateNum(coleman_bubble[0][x], decimal_places) != truncateNum(np.pi, decimal_places)]\n",
    "    y_list = [x for x in range(len(coleman_bubble[0])) if truncateNum(coleman_bubble[0][x], decimal_places) == truncateNum(2*np.pi, decimal_places)]\n",
    "    coord_list = [x for x in range(len(coleman_bubble[0])) if (x in x_list and x not in y_list)]\n",
    "    min_sum = np.sum(coleman_bubble[0])\n",
    "    min_t = 0\n",
    "    for t in range(len(average_bubble)):\n",
    "        a = sum([np.abs(average_bubble[t][x] - coleman_bubble[0][x]) for x in coord_list])\n",
    "        if min_sum > a:\n",
    "            min_sum = a\n",
    "            min_t = t\n",
    "    return min_t, min(x_list), max(x_list)#, min(y_list), max(y_list)\n",
    "    \n",
    "def plot_coleman_match(ab):\n",
    "    average_bubble, average_bubble_error, common_time = ab\n",
    "    t_coleman, a, b = coleman_match(average_bubble)\n",
    "    print('shape of bubble: ', np.shape(average_bubble))\n",
    "    print('t_coleman = ', t_coleman)\n",
    "    solution = average_bubble[t_coleman]\n",
    "    solution_error = average_bubble_error[t_coleman]\n",
    "    difference = [coleman_bubble[0][i] - solution[i] for i in range(len(coleman_bubble[0]))]\n",
    "\n",
    "    fig = plt.figure(figsize=(12,4)); plt.subplots_adjust(hspace=.0)\n",
    "    gs = gridspec.GridSpec(1, 2); ax = [[],[]]\n",
    "    ax[0] = plt.subplot(gs[0]); ax[1] = plt.subplot(gs[1])\n",
    "\n",
    "    im = ax[0].imshow(average_bubble, aspect='auto', interpolation='none', origin='lower')#, extent=[0, dx*len(average_bubble[0]), 0, dtout*len(average_bubble)])     \n",
    "    clb = plt.colorbar(im, ax = ax[0])\n",
    "    ax[0].set(xlabel = r'$x$', ylabel=r'$t$')\n",
    "    ax[0].plot(np.arange(len(solution)), np.ones(len(solution))*t_coleman, 'r-')\n",
    "    ax[0].plot(np.arange(len(solution)), np.ones(len(solution))*(len(average_bubble)-common_time), color='darkgray', ls='-', linewidth=0.5)\n",
    "\n",
    "    mask = []\n",
    "    for t in range(len(coleman_bubble)):\n",
    "        mask.append([])\n",
    "        for x in range(len(coleman_bubble[-1])):\n",
    "            if coleman_bubble[t][x] != 0.:\n",
    "                mask[-1].append(1.)\n",
    "            else:\n",
    "                mask[-1].append(0.)\n",
    "    extra_t = len(coleman_bubble)\n",
    "    if t_coleman + extra_t >= len(average_bubble):\n",
    "        extra_t = len(average_bubble) - t_coleman\n",
    "#    x, y = np.meshgrid(range(len(mask[0])), range(len(mask[:extra_t])))\n",
    "#    ax.contour(x, y, mask[:extra_t], levels=[0.5, 1.5], colors=('k',), linewidths=(1.5,), origin='lower')\n",
    "    im = ax[1].imshow((average_bubble[t_coleman:(t_coleman+extra_t):1]-coleman_bubble[:extra_t])*mask[:extra_t], aspect='auto', interpolation='none', origin='lower')#, extent=[0, dx*len(average_bubble[0]), 0, dtout*(len(average_bubble)-t_coleman)])\n",
    "    clb = plt.colorbar(im, ax = ax[1])\n",
    "    ax[1].set(xlabel = r'$x$', ylabel=r'$t$')\n",
    "    plt.savefig(plots_file+'bubble_solution_'+suffix+'.png');\n",
    "    plt.show()\n",
    "\n",
    "    fig = plt.figure(figsize=(10,5))\n",
    "    plt.errorbar(np.arange(len(solution)), solution, yerr = solution_error, color = 'k', marker='o', ms=1, ecolor = 'green', label = 'Average bubble')\n",
    "    plt.plot(np.arange(len(coleman_bubble[0])), coleman_bubble[0], 'r-', linewidth=5.0, label = 'Coleman best fit at t = '+str(t_coleman))\n",
    "    plt.errorbar(np.arange(len(coleman_bubble[0])), difference, yerr = solution_error, color = 'k', marker='o', ms=1, ecolor = 'yellow', label = 'Difference')\n",
    "    plt.axvline(a, color = 'darkgray', ls = '--'); plt.axvline(b, color = 'darkgray', ls = '--')\n",
    "#    plt.axvline(c, color = 'darkgray', ls = '--'); plt.axvline(d, color = 'darkgray', ls = '--')\n",
    "    plt.legend(); plt.grid()\n",
    "    plt.savefig(plots_file+'bubble_profile_'+suffix+'.png');\n",
    "    plt.show()\n",
    "    return"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "def bubble_energies(bubble, bubble_mom_sq, bubble_gradient, bubble_potential):\n",
    "    average_bubble = bubble[0]; KED = 0.5*bubble_mom_sq[0]; GED = 0.5*bubble_gradient[0]; PED = bubble_potential[0]\n",
    "    return KED, GED, PED, KED + GED + PED\n",
    "\n",
    "def bubble_total_energy(bubble, bubble_mom_sq, bubble_gradient, bubble_potential):\n",
    "    energies = bubble_energies(bubble, bubble_mom_sq, bubble_gradient, bubble_potential)\n",
    "    return [ [sum(ED[t]) for t in range(len(ED))] for ED in energies ]\n",
    "\n",
    "def plot_total_energy_density(bubble, bubble_mom_sq, bubble_gradient, bubble_potential):\n",
    "    KED, GED, PED, TED = bubble_energies(bubble, bubble_mom_sq, bubble_gradient, bubble_potential)\n",
    "    t_coleman = coleman_match(bubble[0])[0]\n",
    "\n",
    "    fig = plt.figure(figsize=(15,10)); gs = gridspec.GridSpec(2, 2); ax = [[],[], [], []]\n",
    "    ax[0] = plt.subplot(gs[0]); ax[1] = plt.subplot(gs[1]); ax[2] = plt.subplot(gs[2]); ax[3] = plt.subplot(gs[3])\n",
    "    im = ax[0].imshow(KED, aspect='auto', interpolation='none', origin='lower')   \n",
    "    ax[0].plot(np.arange(len(bubble[0][t_coleman])), np.ones(len(bubble[0][t_coleman]))*t_coleman, 'r-')\n",
    "    clb = plt.colorbar(im, ax = ax[0]); ax[0].set_title(r'KED: $\\frac{1}{2}(\\partial_t \\phi)^2$'); ax[0].set(ylabel=r'$t$')\n",
    "    im = ax[1].imshow(GED, aspect='auto', interpolation='none', origin='lower')   \n",
    "    ax[1].plot(np.arange(len(bubble[0][t_coleman])), np.ones(len(bubble[0][t_coleman]))*t_coleman, 'r-')\n",
    "    clb = plt.colorbar(im, ax = ax[1]); ax[1].set_title(r'GED: $\\frac{1}{2}|\\nabla \\phi|^2$')\n",
    "    im = ax[2].imshow(PED, aspect='auto', interpolation='none', origin='lower')   \n",
    "    ax[2].plot(np.arange(len(bubble[0][t_coleman])), np.ones(len(bubble[0][t_coleman]))*t_coleman, 'r-')\n",
    "    clb = plt.colorbar(im, ax = ax[2]); ax[2].set_title(r'PED: $V(\\phi)$'); ax[2].set(xlabel = r'$x$', ylabel=r'$t$')\n",
    "    im = ax[3].imshow(TED, aspect='auto', interpolation='none', origin='lower')   \n",
    "    ax[3].plot(np.arange(len(bubble[0][t_coleman])), np.ones(len(bubble[0][t_coleman]))*t_coleman, 'r-')\n",
    "    clb = plt.colorbar(im, ax = ax[3]); ax[3].set_title(r'TED: $\\frac{1}{2}\\left[(\\partial_t \\phi)^2 +|\\nabla \\phi|^2\\right] +V(\\phi)$'); ax[3].set(xlabel = r'$x$')\n",
    "    plt.savefig(plots_file+'energy_densities'+suffix+'.png');\n",
    "    return\n",
    "\n",
    "def plot_total_energy(bubble, bubble_mom_sq, bubble_gradient, bubble_potential):\n",
    "    KE, GE, PE, TE = bubble_total_energy(bubble, bubble_mom_sq, bubble_gradient, bubble_potential)\n",
    "    t_coleman = coleman_match(bubble[0])[0]\n",
    "\n",
    "    fig = plt.figure(figsize=(5,4))\n",
    "    plt.plot(np.arange(len(KE)), KE, 'b-', label = 'KE')\n",
    "    plt.plot(np.arange(len(GE)), GE, 'g-', label = 'GE')\n",
    "    plt.plot(np.arange(len(PE)), PE, 'y-', label = 'PE')\n",
    "    plt.plot(np.arange(len(TE)), TE, 'r-', label = 'TE', linewidth=5.0)\n",
    "    plt.axhline(np.mean(TE), color = 'darkgray', ls = '--')\n",
    "    plt.axvline(t_coleman, color = 'darkgray', ls = '--')#, label=r'$t_C$')\n",
    "    plt.xlabel('$t$'); plt.ylabel(r'$TE = \\int dx$ TED'); plt.grid(); plt.legend()\n",
    "    plt.savefig(plots_file+'energy_balance'+suffix+'.png'); plt.show()\n",
    "    return\n",
    "\n",
    "def plot_bubble_profile(bubble, bubble_mom_sq, bubble_gradient, bubble_potential, timeslice):\n",
    "    KED, GED, PED, TED = bubble_energies(bubble, bubble_mom_sq, bubble_gradient, bubble_potential)\n",
    "    t_coleman = coleman_match(bubble[0])[0]\n",
    "    final_t = timeslice - t_coleman\n",
    "    \n",
    "    fig = plt.figure(figsize=(10,8)); plt.subplots_adjust(hspace=.0)\n",
    "    gs = gridspec.GridSpec(5, 1, height_ratios=[2, 1, 1, 1, 1])\n",
    "    ax = [[],[],[],[], []]; ax[0] = plt.subplot(gs[0])\n",
    "    ax[1] = plt.subplot(gs[1], sharex = ax[0]); ax[2] = plt.subplot(gs[2], sharex = ax[1])\n",
    "    ax[3] = plt.subplot(gs[3], sharex = ax[2]); ax[4] = plt.subplot(gs[4], sharex = ax[3])\n",
    "\n",
    "    ax[0].plot(np.arange(len(bubble[0][timeslice])), bubble[0][timeslice], 'ko', ms='3', label = 'Average Bubble at t = '+str(timeslice))\n",
    "    ax[1].plot(np.arange(len(PED[timeslice])), PED[timeslice], 'y-', label = 'PED')\n",
    "    ax[2].plot(np.arange(len(KED[timeslice])), KED[timeslice], 'b-', label = 'KED')\n",
    "    ax[3].plot(np.arange(len(GED[timeslice])), GED[timeslice], 'g-', label = 'GED')\n",
    "    ax[4].plot(np.arange(len(TED[timeslice])), TED[timeslice], 'r-', label = 'TED')\n",
    "\n",
    "    if final_t >= 0:\n",
    "        bubble_match = [i if i != 0. else None for i in coleman_bubble[final_t]]\n",
    "        first_line = coleman_bubble[final_t].tolist().index(0)\n",
    "        last_line = len(coleman_bubble[final_t]) - 1 - coleman_bubble[final_t][::-1].tolist().index(0)\n",
    "        ax[0].plot(np.arange(len(bubble_match)), bubble_match, 'r-', label = 'Coleman Bubble at t = '+str(timeslice))\n",
    "        ax[0].axvline(first_line, color = 'darkgray', ls = '--'); ax[0].axvline(last_line, color = 'darkgray', ls = '--')\n",
    "        ax[1].axvline(first_line, color = 'darkgray', ls = '--'); ax[1].axvline(last_line, color = 'darkgray', ls = '--')\n",
    "        ax[2].axvline(first_line, color = 'darkgray', ls = '--'); ax[2].axvline(last_line, color = 'darkgray', ls = '--')\n",
    "        ax[3].axvline(first_line, color = 'darkgray', ls = '--'); ax[3].axvline(last_line, color = 'darkgray', ls = '--')\n",
    "        ax[4].axvline(first_line, color = 'darkgray', ls = '--'); ax[4].axvline(last_line, color = 'darkgray', ls = '--')\n",
    "\n",
    "    ax[0].grid(); ax[0].legend(); ax[1].grid(); ax[1].legend()\n",
    "    ax[2].grid(); ax[2].legend(); ax[3].grid(); ax[3].legend()\n",
    "    ax[4].grid(); ax[4].legend(); ax[4].set(xlabel='$x$')\n",
    "    plt.savefig(plots_file+'bubble_profile_at_t'+str(timeslice)+suffix+'.png'); plt.show()\n",
    "    return"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "coleman_bubble_file = pickle_location+'coleman_bubble_file'+suffix+'.npy'\n",
    "#coleman_bubble = \n",
    "#np.save(coleman_bubble_file, coleman_bubble)\n",
    "\n",
    "coleman_bubble = np.load(coleman_bubble_file)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "# valid simulations:  0\n"
     ]
    },
    {
     "ename": "UnboundLocalError",
     "evalue": "local variable 'n_coord' referenced before assignment",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mUnboundLocalError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-24-9ce84121a1be>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mbubble_cutouts\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcut_out_coordinates\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msim_selection\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlim_bubble\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mab\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstack_bubbles\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbubble_cutouts\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0mabm\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstack_bubbles\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbubble_cutouts\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mabgsq\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstack_bubbles\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbubble_cutouts\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-21-9c7921f5c1c1>\u001b[0m in \u001b[0;36mstack_bubbles\u001b[0;34m(overall_bubble_data, col)\u001b[0m\n\u001b[1;32m     67\u001b[0m         \u001b[0mn_coord\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcoord_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     68\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 69\u001b[0;31m     \u001b[0mfield\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m \u001b[0;34m[\u001b[0m \u001b[0;34m[\u001b[0m \u001b[0mt\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mt\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0msim\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0msim\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbubbles\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mcoord\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_coord\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     70\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mcoord\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_coord\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     71\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0msim\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbubbles\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mUnboundLocalError\u001b[0m: local variable 'n_coord' referenced before assignment"
     ]
    }
   ],
   "source": [
    "lim_bubble = 0.11\n",
    "sim_selection = all_right_decaying_sims\n",
    "\n",
    "bubble_cutouts = cut_out_coordinates(sim_selection, lim_bubble)\n",
    "ab = stack_bubbles(bubble_cutouts, 0)\n",
    "abm = stack_bubbles(bubble_cutouts, 1)\n",
    "abgsq = stack_bubbles(bubble_cutouts, 2)\n",
    "abp = stack_bubbles(bubble_cutouts, 3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "timeslice = 55\n",
    "\n",
    "plot_coleman_match(ab)\n",
    "plot_bubble_profile(ab, abm, abgsq, abp, timeslice)\n",
    "plot_total_energy_density(ab, abm, abgsq, abp)\n",
    "plot_total_energy(ab, abm, abgsq, abp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy.integrate import quad\n",
    "\n",
    "wall_tension, err = quad(lambda x: np.sqrt(2*(V(x) - V(2*np.pi))), np.pi, 2*np.pi)\n",
    "epsilon = V(np.pi) - V(2*np.pi)\n",
    "\n",
    "def total_energy_balace(r, dr):\n",
    "    velocity = dr * dx / dtout  # = np.sqrt( 1 - (r0/r)**2 )\n",
    "    bubble_area = 2      #4.*np.pi * r**2\n",
    "    bubble_volume = 2*r      #4.*np.pi * r**3 / 3.\n",
    "    relativistic_factor = np.sqrt(1 - velocity**2)\n",
    "    return bubble_area * wall_tension / relativistic_factor - bubble_volume * epsilon\n",
    "\n",
    "def total_energy(bubble, bubble_mom_sq, bubble_gradient, bubble_potential, timeslice):\n",
    "    TED = bubble_energies(bubble, bubble_mom_sq, bubble_gradient, bubble_potential)[-1]\n",
    "    return sum(TED[timeslice]) - sum(TED[0])\n",
    "\n",
    "def extract_radius(bubble, timeslice):\n",
    "    curve = bubble[0][timeslice]\n",
    "#    curve = coleman_bubble[0]\n",
    "    peaks, _ = scs.find_peaks(curve)\n",
    "    results_half = scs.peak_widths(curve, peaks, rel_height=0.5)\n",
    "#    plt.plot(curve); plt.plot(peaks, curve[peaks], \"x\"); plt.hlines(*results_half[1:], color=\"C2\"); plt.show()\n",
    "    return int(round(max(results_half[0])/2.))\n",
    "\n",
    "def field_ansatz(r, r0, dr):\n",
    "    return ((np.tanh((r0 - r) / dr * 2) + 3)*np.pi/2)\n",
    "\n",
    "def extract_dr(bubble, bubble_mom_sq, bubble_gradient, bubble_potential, timeslice):\n",
    "    fit = total_energy(bubble, bubble_mom_sq, bubble_gradient, bubble_potential, timeslice)\n",
    "    r = extract_radius(bubble, timeslice)\n",
    "    decimal_places = 3\n",
    "    for dr in np.linspace(0, 0.1, 1000000):\n",
    "        case = 2*wall_tension / np.sqrt( 1 - (dr*dx/dtout)**2 ) - 2*r*epsilon\n",
    "        if truncateNum(case, decimal_places) == truncateNum(fit, decimal_places) :\n",
    "            return dr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "extract_dr(ab, abm, abgsq, abp, t_coleman)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### A section of the bubble wall at rest carries energy wall_tension per unit area.\n",
    "\n",
    ". Any part of the bubble wall at any time is obtained from any other part by a Lorentz transformation\n",
    "\n",
    ". Thus a section of wall expanding with velocity v carries energy wall_thickness / np.sqrt( 1-v**2 ) per unit area\n",
    "\n",
    ". Velocity v = dr/dt = np.sqrt( 1 - (r0/r)**2 ), where r is the radius of the bubble at time t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "t_coleman = coleman_match(ab[0])[0]+52\n",
    "r0 = extract_radius(ab, t_coleman)\n",
    "\n",
    "print(total_energy_balace(r0, 0.25*dtout))\n",
    "print(total_energy(ab, abm, abgsq, abp, t_coleman))\n",
    "\n",
    "plt.plot(np.linspace(0, 0.1, 10000), [total_energy_balace(r0, t*dtout) for t in np.linspace(0, 0.1, 10000)])\n",
    "plt.axhline(0, 'r')\n",
    "plt.grid()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "t_coleman = coleman_match(ab[0])[0]\n",
    "r0 = extract_radius(ab, t_coleman)\n",
    "th_r0 = 3 * wall_tension / epsilon\n",
    "\n",
    "m = nLat\n",
    "\n",
    "profile_ansatz = [field_ansatz(r, r0, 600*dtout) for r in range(m//2)]\n",
    "plt.plot(np.arange(m), profile_ansatz[::-1]+profile_ansatz)\n",
    "plt.axhline(2*np.pi)\n",
    "plt.plot(r0+m//2-1, profile_ansatz[int(round(r0))], 'ro')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.7 (conda) - recommended",
   "language": "python",
   "name": "python37-conda"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
